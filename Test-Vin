        function Test-Vin {
            param (
                <# For PSCore, Current setup doesn't support it 
                [Parameter(Mandatory = $true)]
                [ValidatePattern("(?i)[A-HJ-NPR-Z0-9]{17}",ErrorMessage ="The VIN does not pass VIN Validation, please check VIN format and try again.")]$vin
                #>
                [Parameter(Mandatory = $true)]
                [ValidatePattern("(?i)[A-HJ-NPR-Z0-9]{17}")]$vin
                
                
            )
            $vin = $($PSBoundParameters.Values.trim())
            $VinDigitValue = (8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2 )
            $VinLetterMapping = @{
                'A' = 1; 'B' = 2; 'C' = 3; 'D' = 4; 'E' = 5; 'F' = 6; 'G' = 7; 'H' = 8;
                'J' = 1; 'K' = 2; 'L' = 3; 'M' = 4; 'N' = 5; 'P' = 7; 'R' = 9;
                'S' = 2; 'T' = 3; 'U' = 4; 'V' = 5; 'W' = 6; 'X' = 7; 'Y' = 8; 'Z' = 9
            }  
            $total = 0
            for ($i = 0; $i -lt $vin.length; $i++) {
                $value = if ($vin[$i] -match '[0-9]') { $vin[$i] } 
                Else {
                    $VinLetterMapping["$($vin[$i])"]
                }
                $value = [convert]::ToInt32($value, 10)
                $total += $value * $VinDigitValue[$i];
            }
            $checkDigitValue = $total % 11;
        
            if ($checkDigitValue -lt 10) {
                $CheckDigit = $checkDigitValue
            } else {
                $CheckDigit = 'x'
            }
            if ($vin[8] -match $CheckDigit) {
                "$vin is valid"
            } else {
                ("{0}{1}{2}{3}" -f 'Vin is Invalid correct vin should be',$vin.Substring(0, 8), $checkDigitValue, $vin.Substring(9)) 
            }
        }
